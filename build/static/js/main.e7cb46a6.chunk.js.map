{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","MobilRightPane.tsx","MobilMain.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","src","width","match","onClick","key","href","preventDefault","sendPacket","staySignedIn","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleTimeString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","selectedConversation","firstMessage","c","MessageCard","own","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","MobilMain","undefined","App","showLogin","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e7cb46a6.chunk.js","sourcesContent":["import {OutgoingPacket} from './chat'\r\nimport {InboxDto} from './chat'\r\nimport {IncomingPacket} from './chat'\r\nimport {MessageDto} from './chat'\r\nimport {EventProducer} from './EventProducer'\r\n\r\ninterface ProxyEventMap\r\n{\r\n    \"login\": () => void;\r\n    \"message\": ( channelId: string, message: MessageDto ) => void;\r\n    \"conversation\": ( channelId: string ) => void;\r\n}\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap>\r\n{\r\n    private ws: WebSocket;\r\n    inbox: InboxDto | null = null;\r\n    constructor()\r\n    {\r\n        super();\r\n        this.ws = new WebSocket( \"wss://raja.aut.bme.hu/chat/\" );\r\n        this.ws.addEventListener( \"open\", () =>\r\n        {\r\n        } );\r\n        this.ws.addEventListener( \"message\", e =>\r\n        {\r\n            let p = <IncomingPacket>JSON.parse( e.data );\r\n            switch ( p.type )\r\n            {\r\n                case \"error\":\r\n                    alert( p.message );\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch( \"login\" );\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find( x => x.channelId === cid )?.lastMessages.push( p.message );\r\n                    this.dispatch( \"message\", cid, p.message );\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push( p.conversation );\r\n                    this.dispatch( \"conversation\", p.conversation.channelId );\r\n                    break;\r\n            }\r\n        } );\r\n        \r\n    }\r\n    sendPacket(packet: OutgoingPacket){\r\n        this.ws.send( JSON.stringify( packet ) );\r\n           \r\n    } \r\n    \r\n}\r\n\r\n\r\nexport var proxy = new Proxy();\r\n","export class EventProducer<M>\r\n{\r\n    //<K extends keyof M>\r\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\r\n    addEventListener<K extends keyof M>( type: K, listener: M[ K ], obj?: Object )\r\n    {\r\n        this.listeners.push( { type, listener, obj } );\r\n    }\r\n    removeEventListener<K extends keyof M>( type: K, listener: M[ K ] )\r\n    {\r\n        this.listeners.splice( this.listeners.findIndex( x => x.type === type && x.listener === listener ), 1 );\r\n    }\r\n    protected dispatch<K extends keyof M>( type: K, ...args )\r\n    {\r\n        for ( let listener of this.listeners.filter( x => x.type === type ) )\r\n            listener.listener.call( listener.obj, ...args );\r\n    }\r\n    removeAllEventListener<K extends keyof M>( obj: Object )\r\n    {\r\n        if ( !obj )\r\n            throw new Error( \"Must specify object\" );\r\n        this.listeners = this.listeners.filter( x => x.obj !== obj );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './TextInput.css'\r\n\r\n\r\nexport interface TextInputOptions\r\n{\r\n    value?: string;\r\n    onChange?: ( value: string ) => void;\r\n    type?: \"text\" | \"password\" | \"email\" ;\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport class TextInput extends Component<TextInputOptions>{\r\n    state = { value: this.props.value, focus: false };\r\n    \r\n\r\n    render()\r\n    {\r\n        let attrs = {} as any;\r\n        if ( this.props.autofocus )\r\n            attrs.autoFocus = true;\r\n        if ( this.props.onEnter ) attrs.onKeyDown = e =>\r\n        {\r\n            if ( e.keyCode === 13 )\r\n                this.props.onEnter!();\r\n        };\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input {...attrs} type={ this.props.type ?? \"text\" } value={ this.state.value }\r\n                    onChange={ e =>\r\n                    {\r\n                        this.setState( { value: e.target.value } );\r\n                        this.props.onChange?.( e.target.value );\r\n                    } }\r\n                    onBlur={ () => this.setState( { focus: false } ) }\r\n                    onFocus={ () => this.setState( { focus: true } ) } />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={ this.state.value || this.state.focus ? \"subsided\" : \"\" }>\r\n                    { this.props.placeholder }\r\n                </label>\r\n            </div> );\r\n    }\r\n    \r\n}","import React, { Component } from 'react';\r\nimport './index.css'\r\nimport {proxy} from './Proxy'\r\nimport {TextInputAndButton} from './TextInputAndButton'\r\nimport {TextInput} from './TextInput'\r\n\r\ntype state = { email: string, password: string, displayName: string, register: Boolean };\r\n\r\nexport class Login extends Component<{}, state>\r\n{\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={ this.state.email }\r\n                    onChange={ e => {\r\n\r\n                        this.setState( { email: e } ) \r\n                        if(e.match(/hiteao/i) )\r\n                            this.setState( { displayName : \"Márton\"})\r\n                        }\r\n                    } onEnter={ () => this.onClick() } autofocus={ true } />\r\n\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={ this.state.password } onChange={ e => this.setState( { password: e } ) }\r\n                    onEnter={ () => this.onClick() } />\r\n\r\n                { this.state.register &&\r\n                    <TextInput type=\"text\" key={ this.state.displayName } placeholder=\"Display Name (Agent Smith)\" value={ this.state.displayName } \r\n                        onChange={ e => this.setState( { displayName: e } ) } onEnter={ () => this.onClick() } /> \r\n                }\r\n                <button type=\"button\" onClick={ () => this.onClick() }>\r\n                    { this.state.register ? \"Register\" : \"Login\" }\r\n                </button>\r\n                <p>{ this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \" }\r\n                    <a href=\"\" onClick={ e =>\r\n                        {\r\n                            e.preventDefault();\r\n                            this.setState( state => ( { register: !state.register } ) ); // pass a function instead of object\r\n                        } }>\r\n                            { this.state.register ? \"Login\" : \"Register\" }\r\n                    </a>\r\n                </p>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div> );\r\n    }\r\n    onClick()\r\n    {\r\n        if ( this.state.register )\r\n            proxy.sendPacket( { type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false } );\r\n        else\r\n            proxy.sendPacket( { type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false } );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {TextInputOptions} from './TextInput'\r\nimport {TextInput} from './TextInput'\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions\r\n{\r\n    buttonContent?: string;\r\n    onClick?: ( text: string ) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n    onClick()\r\n    {\r\n        if ( this.props.onClick?.( this.textInput.current?.state.value ?? \"\" ) )\r\n            this.textInput.current?.setState( { value: \"\" } );\r\n    }\r\n    render()\r\n    {\r\n        \r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput { ...this.props } ref={ this.textInput } onEnter={ () => this.onClick() } />\r\n                <button type=\"button\" onClick={ () => this.onClick() }>\r\n                    { this.props.buttonContent }\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {ConversationDto} from './chat'\r\nimport {proxy} from './Proxy'\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n    render()\r\n    {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n        this.props.conversation.lastMessages[ this.props.conversation.lastMessages.length - 1 ] : null;\r\n        return (\r\n            <div className={ \"conversation-card\" + ( this.props.selected ? \" selected\" : \"\" ) }\r\n                onClick={ () => this.props.onSelect() }>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{ this.props.conversation.name }</span>\r\n                    <span className=\"time\">\r\n                        { lastMessage && new Date( lastMessage.timeStamp ).toLocaleTimeString() }\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{ lastMessage?.content }</span>\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"message\", ( cid, m ) =>\r\n        {\r\n        if ( cid === this.props.conversation.channelId )\r\n            this.forceUpdate();\r\n        }, this );\r\n    }\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {InboxDto} from './chat'\r\nimport {ConversationDto} from './chat'\r\nimport {TextInputAndButton} from './TextInputAndButton'\r\nimport {ConversationCard} from './ConversationCard'\r\nimport {proxy} from './Proxy'\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: ( c: ConversationDto ) => void\r\n}>\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: { this.props.inbox.user.tag }</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={ text => this.sendContactRequest( text ) } />\r\n                <div className=\"conversations\">\r\n                    { this.props.inbox.conversations.map( x =>\r\n                    <ConversationCard\r\n                        key={ x.channelId }\r\n                        conversation={ x }\r\n                        selected={ x === this.props.selectedConversation }\r\n                        onSelect={ () => this.props.onSelect( x ) } /> ) }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    sendContactRequest( email: string )\r\n    {\r\n        proxy.sendPacket( { type: \"contactRequest\", email, firstMessage: \"Hello\" } );\r\n        return true;\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"conversation\", c => this.forceUpdate(), this );\r\n    }\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport {MessageDto} from './chat'\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div className={ \"message-card\" + ( this.props.own ? \" own\" : \"\" ) }>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{ this.props.message.content }</span>\r\n                    <span className=\"time\">\r\n                        { new Date( this.props.message.timeStamp ).toLocaleTimeString() }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {ConversationDto} from './chat'\r\nimport {proxy} from './Proxy'\r\nimport {TextInputAndButton} from './TextInputAndButton'\r\nimport {MessageCard} from './MessageCard'\r\nimport './index.css'\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"message\", ( cid, m ) =>\r\n        {\r\n        if ( cid === this.props.conversation?.channelId )\r\n            this.forceUpdate();\r\n        }, this );\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n\r\n    onSend( text: string )\r\n    {\r\n        proxy.sendPacket( { type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: \"H: \" + text } );\r\n        return true;\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                { this.props.conversation &&\r\n                <>\r\n                    <div className=\"conversation-header row\">\r\n                        <button type=\"button\" className=\"only-narrow\"\r\n                            onClick={ () => this.props.onBack() }>Back\r\n                        </button>\r\n                        <p>{ this.props.conversation?.name }</p>\r\n                    </div>\r\n                    <div className=\"messages\">\r\n                        { this.props.conversation?.lastMessages.map( x =>\r\n                            <MessageCard key={ x.id } message={ x }\r\n                                own={ x.senderId === proxy.inbox?.user.id } /> ) }\r\n                    </div>\r\n                    <div className=\"send-message row\">\r\n                        <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                        buttonContent=\"Send\" onClick={ x => this.onSend( x ) } />\r\n                    </div>\r\n                </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {ConversationDto} from './chat'\r\nimport {LeftPane} from './LeftPane'\r\nimport {proxy} from './Proxy'\r\nimport {RightPane} from './MobilRightPane'\r\nimport './index.css'\r\n\r\nexport class MobilMain extends Component\r\n{\r\n    state = { selectedConversation: undefined as ( ConversationDto | undefined ) };\r\n    render()\r\n    {\r\n        let className = \"main row \" + ( this.state.selectedConversation ? \"right\" : \"left\" );\r\n        return (\r\n            <div className={ className }>\r\n                <LeftPane\r\n                    inbox={ proxy.inbox! }\r\n                    selectedConversation={ this.state.selectedConversation }\r\n                    onSelect={ c => this.setState( { selectedConversation: c } ) } />\r\n                <RightPane conversation={ this.state.selectedConversation }\r\n                    onBack={ () => this.setState( { selectedConversation: undefined } ) } />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport './index.css';\nimport { Login } from './Login'\nimport './Login.css'\nimport {proxy} from './Proxy'\nimport {Main} from './Main'\nimport {MobilMain} from './MobilMain'\n\nexport default class App extends Component\n{\n  state = { showLogin: true };\n  componentDidMount()\n  {\n    proxy.addEventListener( \"login\", () => this.setState( { showLogin: false } ) );\n  }\n  render()\n  {\n    return (\n      <div className=\"app\">\n        { this.state.showLogin ? <Login /> : <MobilMain /> }\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n\n"],"sourceRoot":""}